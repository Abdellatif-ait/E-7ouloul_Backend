// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("HEROKU_POSTGRESQL_MAUVE_URL")
}

model tourist {
  id         String    @id @default(cuid())
  email      String
  username   String
  password   String
  nom        String
  prenom     String
  phoneNum   String    @unique
  poste      post[]
  circuits   circuit[]
  places     visiter[]
  followedby abonne[]  @relation("Follower")
  following  abonne[]  @relation("Following")
}

model responsable {
  id       String     @id @default(cuid())
  email    String
  username String
  password String
  contents contenue[]
  annonces annonce[]
}

model annonce {
  idannonce    String      @id @default(cuid())
  contenue     String
  Addedat      DateTime
  annoncemaker responsable @relation(fields: [idres], references: [id])
  idres        String
}

model lieu {
  id            String           @id @default(cuid())
  name          String
  accesstimebeg DateTime
  accesstimend  DateTime
  tourist       visiter[]
  Documentation Documentation[]
  qrCode        qrCode[]
  circuit       circuitContent[]
  content       contenue[]
}

model Documentation {
  id     String @id @default(cuid())
  docURL String
  lieu   lieu   @relation(fields: [lieuid], references: [id])
  lieuid String
}

model qrCode {
  id     String @id @default(cuid())
  lieu   lieu   @relation(fields: [lieuid], references: [id])
  lieuid String
}

model post {
  id          String   @id @default(cuid())
  postedat    DateTime @default(now())
  description String
  mediaURL    String   @default("")
  poster      tourist  @relation(fields: [touristid], references: [id])
  touristid   String
}

model circuit {
  id        String           @id @default(cuid())
  proposer  tourist          @relation(fields: [touristid], references: [id])
  touristid String
  content   circuitContent[]
}

model abonne {
  abonee        tourist @relation("Follower", fields: [aboneeid], references: [id])
  aboneeid      String
  abonnements   tourist @relation("Following", fields: [abonnementsid], references: [id])
  abonnementsid String

  @@id([aboneeid, abonnementsid])
}

model contenue {
  idcontent      String      @id @default(cuid())
  contentURL     String
  addedat        DateTime
  contentcreator responsable @relation(fields: [resid], references: [id])
  resid          String
  place          lieu        @relation(fields: [idplace], references: [id])
  idplace        String
}

model visiter {
  visiteur   tourist @relation(fields: [visiteurid], references: [id])
  visiteurid String
  place      lieu    @relation(fields: [placeid], references: [id])
  placeid    String

  @@id([visiteurid, placeid])
}

model circuitContent {
  circuit   circuit @relation(fields: [circuitId], references: [id])
  lieu      lieu    @relation(fields: [lieuId], references: [id])
  circuitId String
  lieuId    String
  position  Int

  @@id([circuitId, lieuId])
}
